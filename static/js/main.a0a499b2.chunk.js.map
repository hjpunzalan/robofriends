{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","Components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","margin","overflowY","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Components_SearchBox","Components_Scroll","Components_ErrorBoundary","Components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0a499b2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card =({ name, email, id}) => {\n\n\treturn(\n\t\t<div className ='tc dib br3 pa3 ma2 grow bw2'>\n\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n\t\t<div>\n\t\t<h2>{name}</h2>\n\t\t<p>{email}</p>\n\t\t</div>\n\t</div>\n\t\t);\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn (\n\t<div>\n\t{\n\trobots.map((user,i) => {\n\t\treturn (\n\t\t <Card \n\t\tkey={i}\n\t\tid={robots[i].id}\n\t\tname={robots[i].name} \n\t\temail={robots[i].email} />\n\t);\n\t})\n}\n\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t<input\n\t\taria-label='Search Robots'\n\t\tclassName= 'pa3 ba b--red bg-light-blue' \n\t\ttype ='search' \n\t\tplaceholder='Search robots' \n\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>\n\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{\n\t\t\tmargin:'auto',\n\t\t\toverflowY: 'scroll',\n\t\t\theight:'60vh' }}>\n\t\t{props.children}\n\t\t</div>\n\n\t\t);\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n        componentDidCatch(error, info) {\n            this.setState({hasError: true})\n\n        }\n\n\n    \n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops.That is not good</h1>\n        }\n        return this.props.children; //anything within the class (errorboundry {Cardlist})\n        \n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../Components/CardList.js';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender(){\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn isPending ? \n\t\t<h1> Loading... </h1> :\n(\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'> My Robo Friends</h1>\n\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t</div>\n\t\t);\n\t\n\t\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch ({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type:REQUEST_ROBOTS_FAILED, payload: error }))\n}\n\n//An action is an object that has to be called out by a function to make it simpler in React.\n//Dispatches pending first for the user and then checks if theirs a promise to fetch data.","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField:action.payload}) //returns an object searchRobots\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action ={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending:true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createLogger } from 'redux-logger';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer =  combineReducers({searchRobots,requestRobots})\nconst store = \ncreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider store={store}>\n\t\t\t\t\t<App /> \n\t\t\t\t</Provider>\n\t\t\t\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}